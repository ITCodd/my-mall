server:
  port: 9004

spring:
  application:
    name: mymall-workflow
  main:
    allow-bean-definition-overriding: true
  http:
    encoding:
      force: true
      charset: UTF-8
      enabled: true
  #数据源配置
  datasource:
    name: test
    url: jdbc:mysql://127.0.0.1:3306/mymall-workflow?useUnicode=true&characterEncoding=UTF-8
    username: root
    password: root
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.jdbc.Driver
    #druid的属性
    filters: stat
    maxActive: 20
    initialSize: 5
    maxWait: 60000
    minIdle: 5
    timeBetweenEvictionRunsMillis: 60000
    minEvictableIdleTimeMillis: 300000
    validationQuery: select 'x'
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    poolPreparedStatements: true
    maxOpenPreparedStatements: 20
    defaultAutoCommit: false
  activiti:
    check-process-definitions: false #自动检查、部署流程定义文件
    database-schema-update: true #自动生成表结构

# mybatis-plus配置
mybatis-plus:
  mapper-locations: classpath*:/mapper/**.xml
  typeAliasesPackage: com.github.model
  #  typeEnumsPackage: com.baomidou.springboot.entity.enums
  global-config:
    #刷新mapper 调试神器
    db-config:
      #主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";
      id-type: AUTO
      #字段策略 0:"忽略判断",1:"非 NULL 判断"),2:"非空判断"
      #field-strategy: not_empty
      #驼峰下划线转换
      #      column-underline: false
      #数据库大写下划线转换
      #      capital-mode: true
      #逻辑删除配置
      logic-delete-value: 0
      logic-not-delete-value: 1
    refresh: true
    #自定义填充策略接口实现
    #meta-object-handler: com.baomidou.springboot.xxx
    #自定义SQL注入器
    #sql-injector: com.baomidou.springboot.xxx
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: false


security:
  oauth2:
    client:
      client-id: c2
      client-secret: 123
      access-token-uri: http://localhost:9001/oauth/token
      user-authorization-uri: http://localhost:9001/oauth/authorize
    resource:
      jwt:
#        key-uri: http://localhost:9001/oauth/token_key
        key-value: 123456

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:9200/eureka/
  instance:
    preferIpAddress: true
    instance-id: ${spring.application.name}:${spring.cloud.client.ip-address}:${spring.application.instance_id:${server.port}}


ribbon:
  MaxAutoRetries: 2 #最大重试次数，当Eureka中可以找到服务，但是服务连不上时将会重试，如果eureka中找不到服务则直接走断路器
  MaxAutoRetriesNextServer: 3 #切换实例的重试次数
  OkToRetryOnAllOperations: false  #对所有操作请求都进行重试，如果是get则可以，如果是post，put等操作没有实现幂等的情况下是很危险的,所以设置为false
  ConnectTimeout: 50000  #请求连接的超时时间
  ReadTimeout: 60000 #请求处理的超时时间

hystrix:
  command:
    default:  #default全局有效，service id指定应用有效
      execution:
        timeout:
          #如果enabled设置为false，则请求超时交给ribbon控制,为true,则超时作为熔断根据
          enabled: true
        isolation:
          thread:
            timeoutInMilliseconds: 50000 #断路器超时时间，默认1000ms

feign:
  hystrix:
    enabled: true
  #请求和响应GZIP压缩支持
  compression:
    request:
      enabled: true
      min-request-size: 2048
      mime-types:
        - text/xml
        - application/xml
        - application/json
    response:
      enabled: true

logging:
  level:
    com.github: debug



